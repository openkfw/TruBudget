stages:
  - name: audit
    if: type IN (pull_request, cron)
  - test
  - name: dockerbuild
    if: commit_message !~ /(skip-build|wip)/ AND fork = false AND type != cron AND (branch = master OR tag IS present OR type IN (pull_request))
  - name: notification
    if: commit_message !~ /(skip-build|wip)/ AND fork = false AND type != cron AND (branch = master OR tag IS present OR type IN (pull_request))

.node-env: &node-env
  language: node_js
  node_js:
    - "10"
  cache: npm

.dangerjs: &dangerjs
  stage: test
  <<: *node-env
  script:
    - npm run danger ci

.audit: &audit
  stage: audit
  <<: *node-env
  before_script:
    - cd $PROJECT_NAME
    - chmod +x ../scripts/pipeline/audit.sh
  script:
    - ../scripts/pipeline/audit.sh

.node-unit-test: &node-unit-test
  stage: test
  <<: *node-env
  script:
    - cd $PROJECT_NAME
    - npm ci
    - npm test

.docker-build: &docker-build
  stage: dockerbuild
  language: minimal
  services:
    - docker
  before_script:
    - cd $PROJECT_NAME
    - chmod +x ../scripts/pipeline/publish-docker-images.sh
  script: ../scripts/pipeline/publish-docker-images.sh

jobs:
  include:
    - <<: *audit
      env: PROJECT_NAME=blockchain
    - <<: *audit
      env: PROJECT_NAME=api
    - <<: *audit
      env: PROJECT_NAME=frontend
    - <<: *audit
      env: PROJECT_NAME=excel-export
    - <<: *dangerjs
      if: type = pull_request
      env: NAME="Danger JS"
    - <<: *node-unit-test
      env: PROJECT_NAME=blockchain
      after_success: npm run coverage
    - <<: *node-unit-test
      env: PROJECT_NAME=api
      after_success: npm run coverage
    - <<: *node-unit-test
      env: PROJECT_NAME=frontend
    - <<: *docker-build
      env: PROJECT_NAME=blockchain
    - <<: *docker-build
      env: PROJECT_NAME=api
    - <<: *docker-build
      env: PROJECT_NAME=frontend
    - <<: *docker-build
      env: PROJECT_NAME=provisioning
    - <<: *docker-build
      env: PROJECT_NAME=e2e-test
    - <<: *docker-build
      env: PROJECT_NAME=excel-export
    - stage: notification
      language: minimal
      script:
        - |
          curl -X POST \
          -F token=$WEBHOOK_TOKEN \
          -F ref=$WEBHOOK_REF \
          -F "variables[TRAVIS_PULL_REQUEST_BRANCH]=$TRAVIS_PULL_REQUEST_BRANCH" \
          -F "variables[TRAVIS_BRANCH]=$TRAVIS_BRANCH" \
          -F "variables[TRAVIS_BUILD_ID]=t_$TRAVIS_BUILD_ID" \
          -F "variables[TRAVIS_EVENT_TYPE_FOR_BRANCH]=$TRAVIS_EVENT_TYPE-$TRAVIS_BRANCH" \
          "$WEBHOOK_URL"

notifications:
  webhooks: https://coveralls.io/webhook
