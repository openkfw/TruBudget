version: "3"

networks:
  mynetwork:
    ipam:
      config:
        - subnet: 172.20.0.0/24

services:
  alpha-node:
    build: ../../blockchain
    environment:
      PORT: 8085
      MULTICHAIN_RPC_PORT: ${MULTICHAIN_RPC_PORT}
      MULTICHAIN_RPC_PASSWORD: ${MULTICHAIN_RPC_PASSWORD}
      ORGANIZATION: ${ORGANIZATION}
      JWT_SECRET: ${JWT_SECRET}
      EMAIL_SERVICE_ENABLED: ${EMAIL_SERVICE_ENABLED}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      LOG_LEVEL: ${BLOCKCHAIN_LOG_LEVEL}
      PRETTY_PRINT: ${PRETTY_PRINT}
      NODE_ENV: ${NODE_ENV}
      CERT_PATH: ${CERT_PATH}
      CERT_CA_PATH: ${CERT_CA_PATH}
      CERT_KEY_PATH: ${CERT_KEY_PATH}
      AUTOSTART: ${AUTOSTART}

    # volume for persisting data from multichain
    # volumes:
    #   - ~/alphaVolume:/root/.multichain
    networks:
      mynetwork:
        ipv4_address: 172.20.0.11
    ports:
      - ${MULTICHAIN_RPC_PORT}:${MULTICHAIN_RPC_PORT} # port for connecting to the multichain daemon
      - ${BLOCKCHAIN_PORT}:${BLOCKCHAIN_PORT} # port for requests to blockchain API
      - "7447:7447" # port for connecting beta nodes (P2P)

  emaildb:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      # volume for persisting data
      # volumes:
      #   - /emaildbVolume:/var/lib/postgresql/data
      # networks:
    networks:
      mynetwork:
        ipv4_address: 172.20.0.2
    ports:
      - 5432:5432

  minio:
    image: minio/minio:RELEASE.2023-09-04T19-57-37Z
    ports:
      - ${MINIO_PORT}:${MINIO_PORT}
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    command: server /data
    # volume for persisting data
    # volumes:
    #   - /minioVolume:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      mynetwork:
        ipv4_address: 172.20.0.3

  alpha-api:
    build: ../../api
    environment:
      PORT: ${API_PORT}
      ORGANIZATION: ${ORGANIZATION}
      ORGANIZATION_VAULT_SECRET: ${ORGANIZATION_VAULT_SECRET}
      MULTICHAIN_RPC_HOST: alpha-node
      MULTICHAIN_RPC_PORT: ${MULTICHAIN_RPC_PORT}
      ROOT_SECRET: ${ROOT_SECRET}
      MULTICHAIN_RPC_PASSWORD: ${MULTICHAIN_RPC_PASSWORD}
      BLOCKCHAIN_PORT: ${BLOCKCHAIN_PORT}
      DOCUMENT_FEATURE_ENABLED: ${DOCUMENT_FEATURE_ENABLED}
      STORAGE_SERVICE_EXTERNAL_URL: ${STORAGE_SERVICE_EXTERNAL_URL}
      STORAGE_SERVICE_HOST: storage-service
      STORAGE_SERVICE_PORT: ${STORAGE_SERVICE_PORT}
      ENCRYPTION_PASSWORD: ${ENCRYPTION_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SIGNING_METHOD: ${SIGNING_METHOD}
      NODE_ENV: ${NODE_ENV}
      ACCESS_CONTROL_ALLOW_ORIGIN: ${ACCESS_CONTROL_ALLOW_ORIGIN}
      LOG_LEVEL: ${API_LOG_LEVEL}
      PRETTY_PRINT: ${PRETTY_PRINT}
      RATE_LIMIT: ${RATE_LIMIT}
      AUTHBUDDY_ENABLED: ${AUTHBUDDY_ENABLED}
      AUTHBUDDY_JWK_KEYSTORE: ${AUTHBUDDY_JWK_KEYSTORE}
      AUTHBUDDY_JWS_SIGNATURE: ${AUTHBUDDY_JWS_SIGNATURE}
      AUTHBUDDY_COOKIE: ${AUTHBUDDY_COOKIE}
    command: ["npm", "run", "watch"] # npm run watch: hot reloading
    # volume to track code changes
    volumes:
      - "../../api/src:/home/node/src:delegated"
      - ../../api/dist:/home/node/dist
    depends_on:
      - alpha-node
    networks:
      mynetwork:
        ipv4_address: 172.20.0.4
    ports:
      - ${API_PORT}:${API_PORT}
      - 9230:9229

  email-service:
    build:
      context: ../../email-notification-service
    #command: ["npm", "start"]
    command: ["npm", "run", "watch"] # npm run watch: hot reloading
    environment:
      JWT_SECRET: ${JWT_SECRET}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      PORT: ${EMAIL_PORT}
      AUTHENTICATION: ${AUTHENTICATION}
      LOG_LEVEL: ${EMAIL_LOG_LEVEL}
      PRETTY_PRINT: ${PRETTY_PRINT}
    # volume for hot reloading
    volumes:
      - "../../email-notification-service/src:/home/node/src:delegated"
    networks:
      mynetwork:
        ipv4_address: 172.20.0.5
    depends_on:
      - emaildb
      - alpha-api
    ports:
      - "8890:8890"

  provisioning:
    build:
      context: ../../provisioning
    command: ["npm", "start"]
    environment:
      API_HOST: alpha-api
      API_PORT: ${API_PORT}
      PROVISIONING_TYPE: ${PROVISIONING_TYPE}
      ROOT_SECRET: ${ROOT_SECRET}
      ORGANIZATION: ${ORGANIZATION}
      LOG_LEVEL: ${PROVISIONING_LOG_LEVEL}
      PRETTY_PRINT: ${PRETTY_PRINT}
    # volumes:
    #   - "../../provisioning/src:/usr/src/app/src:delegated"
    networks:
      mynetwork:
        ipv4_address: 172.20.0.6
    depends_on:
      - alpha-api

  excel-export-service:
    build: ../../excel-export-service
    environment:
      API_HOST: alpha-api
      API_PORT: ${API_PORT}
      PORT: ${EXPORT_PORT}
      JWT_SECRET: ${JWT_SECRET}
      MODE: DEBUG
      LOG_LEVEL: ${EXCEL_LOG_LEVEL}
      PRETTY_PRINT: ${PRETTY_PRINT}
    command: ["npm", "run", "watch"]
    # volume for hot reloading
    volumes:
      - "../../excel-export-service/src:/home/node/src:delegated"
    networks:
      mynetwork:
        ipv4_address: 172.20.0.7
    ports:
      - "${EXPORT_PORT}:${EXPORT_PORT}"
    depends_on:
      - alpha-api

  storage-service:
    build:
      context: ../../storage-service
    environment:
      PORT: ${STORAGE_SERVICE_PORT}
      ACCESS_CONTROL_ALLOW_ORIGIN: ${ACCESS_CONTROL_ALLOW_ORIGIN}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_HOST: minio
      MINIO_PORT: ${MINIO_PORT}
      LOG_LEVEL: ${STORAGE_LOG_LEVEL}
      PRETTY_PRINT: ${PRETTY_PRINT}
    command: ["npm", "run", "watch"]
    # volume for hot reloading
    volumes:
      - "../../storage-service/src:/home/node/src:delegated"
    networks:
      mynetwork:
        ipv4_address: 172.20.0.8
    depends_on:
      - minio
      - alpha-api
    ports:
      - "${STORAGE_SERVICE_PORT}:${STORAGE_SERVICE_PORT}"

  frontend:
    stdin_open: true
    restart: always
    build:
      context: ../../frontend
      dockerfile: Dockerfile.dev
      args:
        API_HOST: alpha-api
        API_PORT: ${API_PORT}
    environment:
      NODE_ENV: ${NODE_ENV}
      CHOKIDAR_USEPOLLING: "true" # for hot reloading of source files
      REACT_APP_VERSION: ${REACT_APP_VERSION}
      REACT_APP_EXPORT_SERVICE_ENABLED: ${REACT_APP_EXPORT_SERVICE_ENABLED}
      REACT_APP_EMAIL_SERVICE_ENABLED: ${REACT_APP_EMAIL_SERVICE_ENABLED}
      PROD_API_HOST: alpha-api
      PROD_API_PORT: ${API_PORT}
      TEST_API_HOST: alpha-api
      TEST_API_PORT: ${API_PORT}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EXPORT_PORT: ${EXPORT_PORT}
      EXPORT_HOST: ${EXPORT_HOST}
      INLINE_RUNTIME_CHUNK: ${INLINE_RUNTIME_CHUNK}
      REACT_APP_LOGGING: ${REACT_APP_LOGGING}
      REACT_APP_LOG_LEVEL: ${REACT_APP_LOG_LEVEL}
      REACT_APP_LOGGING_SERVICE_HOST: ${REACT_APP_LOGGING_SERVICE_HOST}
      REACT_APP_LOGGING_SERVICE_PORT: ${REACT_APP_LOGGING_SERVICE_PORT}
      REACT_APP_LOGGING_SERVICE_HOST_SSL: ${REACT_APP_LOGGING_SERVICE_HOST_SSL}
      REACT_APP_LOGGING_PUSH_INTERVAL: ${REACT_APP_LOGGING_PUSH_INTERVAL}
      REACT_APP_AUTHBUDDY_ENABLED: ${AUTHBUDDY_ENABLED}
    # volume for hot reloading
    volumes:
      - "../../frontend/src:/app/src"
      - "/app/node_modules"
    networks:
      mynetwork:
        ipv4_address: 172.20.0.91
    ports:
      - "3000:3000"
    depends_on:
      - alpha-api

  logging-service:
    build:
      context: ../../logging-service
    environment:
      LOGGER_PORT: ${LOGGER_PORT}
      API_HOST: alpha-api
      API_PORT: ${API_PORT}
      LOG_LEVEL: ${LOG_LEVEL}
      LOGGING_SERVICE_CACHE_DURATION: ${LOGGING_SERVICE_CACHE_DURATION}
      NODE_ENV: ${LOGGING_SERVICE_NODE_ENV}
      PRETTY_PRINT: ${PRETTY_PRINT}
    networks:
        mynetwork:
          ipv4_address: 172.20.0.13
    ports:
      - "${LOGGER_PORT}:${LOGGER_PORT}"

      
  beta-node:
    build:
      context: ../../blockchain
    environment:
      MULTICHAIN_RPC_PORT: ${BETA_MULTICHAIN_RPC_PORT}
      MULTICHAIN_RPC_PASSWORD: ${MULTICHAIN_RPC_PASSWORD}
      ORGANIZATION: ${BETA_ORGANIZATION}
      EXTERNAL_IP: ${EXTERNAL_IP}
      # P2P_HOST must be a valid IP-Address. If you pass a domain like "alpha-node", the windows kernel will shutdown the process because of a segmentation fault
      P2P_HOST: 172.20.0.11 # IP of alpha-node
      P2P_PORT: 7447
      API_PROTO: http
      API_HOST: alpha-api # API to send register request
      API_PORT: ${API_PORT}
    depends_on:
      - alpha-node
      - alpha-api
    networks:
      mynetwork:
        ipv4_address: 172.20.0.12
    # volume for persisting data from multichain
    # volumes:
    #   - /beta1Volume:/root/.multichain
    ports:
      - ${BETA_MULTICHAIN_RPC_PORT}:${BETA_MULTICHAIN_RPC_PORT}
      - "8086:${BLOCKCHAIN_PORT}"
      - "7448:7447" # beta-node port is 7448 on host 
    privileged: true


  beta-api:
    build: ../../api
    environment:
      PORT: ${BETA_API_PORT}
      ORGANIZATION: ${BETA_ORGANIZATION}
      ORGANIZATION_VAULT_SECRET: ${BETA_ORGANIZATION_VAULT_SECRET}
      MULTICHAIN_RPC_HOST: beta-node
      MULTICHAIN_RPC_PORT: ${BETA_MULTICHAIN_RPC_PORT}
      ROOT_SECRET: ${ROOT_SECRET}
      MULTICHAIN_RPC_PASSWORD: ${MULTICHAIN_RPC_PASSWORD}
      BLOCKCHAIN_PORT: 8086
      DOCUMENT_FEATURE_ENABLED: ${DOCUMENT_FEATURE_ENABLED}
      STORAGE_SERVICE_EXTERNAL_URL: ${STORAGE_SERVICE_EXTERNAL_URL}
      STORAGE_SERVICE_HOST: storage-service
      STORAGE_SERVICE_PORT: ${STORAGE_SERVICE_PORT}
      ENCRYPTION_PASSWORD: ${ENCRYPTION_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SIGNING_METHOD: ${SIGNING_METHOD}
      NODE_ENV: ${NODE_ENV}
      ACCESS_CONTROL_ALLOW_ORIGIN: ${ACCESS_CONTROL_ALLOW_ORIGIN}
      PRETTY_PRINT: ${PRETTY_PRINT}
    command: ["npm", "run", "watch"] # npm run watch: hot reloading
    networks:
      mynetwork:
        ipv4_address: 172.20.0.44
    ports:
      - ${BETA_API_PORT}:${BETA_API_PORT}
    depends_on:
      - beta-node

  beta-frontend:
    restart: always
    stdin_open: true 
    build:
      context: ../../frontend
      dockerfile: Dockerfile.dev
      args:
        API_HOST: beta-api
        API_PORT: ${BETA_API_PORT}
    environment:
      NODE_ENV: ${NODE_ENV}
      REACT_APP_VERSION: ${REACT_APP_VERSION}
      REACT_APP_EXPORT_SERVICE_ENABLED: "false"
      REACT_APP_EMAIL_SERVICE_ENABLED: "false"
      INLINE_RUNTIME_CHUNK: ${INLINE_RUNTIME_CHUNK}
    # # volume for hot reloading
    # volumes:
    #   - "../../frontend/src:/app/src"
    #   - "/app/node_modules"
    networks:
      mynetwork:
        ipv4_address: 172.20.0.92
    depends_on:
      - alpha-api
    ports:
      - "3005:3000"
    
