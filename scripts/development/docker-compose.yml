version: "3"

networks:
  mynetwork:
    ipam:
      config:
        - subnet: 172.20.0.0/24

services:
  master-node:
    build: ../../blockchain
    environment:
      RPC_PORT: ${RPC_PORT}
      RPC_PASSWORD: ${RPC_PASSWORD}
      ORGANIZATION: ${ORGANIZATION}
      EMAIL_SERVICE: ${EMAIL_SERVICE}
      JWT_SECRET: ${JWT_SECRET}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      LOG_LEVEL: ${BLOCKCHAIN_LOG_LEVEL}
    # volume for persisting data from multichain
    # volumes:
    #   - /masterVolume:/root/.multichain
    networks:
      mynetwork:
        ipv4_address: 172.20.0.11
    ports:
      - ${RPC_PORT}:${RPC_PORT}
      - "8085:8085" # port for backup
      - "7447:7447"

  emaildb:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      mynetwork:
        ipv4_address: 172.20.0.2
    ports:
      - 5432:5432

  minio:
    image: minio/minio:RELEASE.2021-06-17T00-10-46Z
    ports:
      - ${MINIO_PORT}:${MINIO_PORT}
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    command: server /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      mynetwork:
        ipv4_address: 172.20.0.3

  master-api:
    build: ../../api
    environment:
      PORT: ${API_PORT}
      ORGANIZATION: ${ORGANIZATION}
      ORGANIZATION_VAULT_SECRET: ${ORGANIZATION_VAULT_SECRET}
      RPC_HOST: master-node
      RPC_PORT: ${RPC_PORT}
      ROOT_SECRET: ${ROOT_SECRET}
      RPC_PASSWORD: ${RPC_PASSWORD}
      DOCUMENT_FEATURE_ENABLED: ${DOCUMENT_FEATURE_ENABLED}
      STORAGE_SERVICE_EXTERNAL_URL: ${STORAGE_SERVICE_EXTERNAL_URL}
      STORAGE_SERVICE_HOST: storage-service
      STORAGE_SERVICE_PORT: ${STORAGE_SERVICE_PORT}
      ORGANIZATION_PUBLIC_KEY: ${ORGANIZATION_PUBLIC_KEY}
      ORGANIZATION_PRIVATE_KEY: ${ORGANIZATION_PRIVATE_KEY}
      ENCRYPTION_PASSWORD: ${ENCRYPTION_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SIGNING_METHOD: ${SIGNING_METHOD}
      NODE_ENV: ${NODE_ENV}
      ACCESS_CONTROL_ALLOW_ORIGIN: ${ACCESS_CONTROL_ALLOW_ORIGIN}
      LOG_LEVEL: ${API_LOG_LEVEL}
    command: ["npm", "run", "watch"] # npm run watch: hot reloading
    # volume to track code changes
    volumes:
      - "../../api/src:/home/node/src:delegated"
      - ../../api/dist:/home/node/dist
    networks:
      mynetwork:
        ipv4_address: 172.20.0.4
    ports:
      - ${API_PORT}:${API_PORT}
    depends_on:
      - master-node

  email-service:
    build:
      context: ../../email-notification-service
    #command: ["npm", "start"]
    command: ["npm", "run", "watch"] # npm run watch: hot reloading
    environment:
      JWT_SECRET: ${JWT_SECRET}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      EMAIL_PORT: ${EMAIL_PORT}
      AUTHENTICATION: ${AUTHENTICATION}
      LOG_LEVEL: ${EMAIL_LOG_LEVEL}
    # volume for hot reloading
    volumes:
      - "../../email-notification-service/src:/home/node/src:delegated"
    networks:
      mynetwork:
        ipv4_address: 172.20.0.5
    depends_on:
      - emaildb
      - master-api
    ports:
      - "8890:8890"

  provisioning:
    build:
      context: ../../provisioning
    command: ["npm", "start"]
    environment:
      API_HOST: master-api
      API_PORT: ${API_PORT}
      ENVIRONMENT_TYPE: TEST
      #Other provisioning data:
      #ENVIRONMENT_TYPE: PROD
      ROOT_SECRET: ${ROOT_SECRET}
      ORGANIZATION: ${ORGANIZATION}
      LOG_LEVEL: ${PROVISIONING_LOG_LEVEL}
    # volumes:
    #   - "../../provisioning/src:/usr/src/app/src:delegated"
    networks:
      mynetwork:
        ipv4_address: 172.20.0.6
    depends_on:
      - master-api

  excel-export-service:
    build: ../../excel-export-service
    environment:
      PROD_API_HOST: master-api
      PROD_API_PORT: ${API_PORT}
      TEST_API_HOST: master-api
      TEST_API_PORT: ${API_PORT}
      PORT: ${EXPORT_PORT}
      JWT_SECRET: ${JWT_SECRET}
      MODE: DEBUG
      LOG_LEVEL: ${EXCEL_LOG_LEVEL}
    command: ["npm", "run", "watch"]
    # volume for hot reloading
    volumes:
      - "../../excel-export-service/src:/home/node/src:delegated"
    networks:
      mynetwork:
        ipv4_address: 172.20.0.7
    ports:
      - "${EXPORT_PORT}:${EXPORT_PORT}"
    depends_on:
      - master-api

  storage-service:
    build:
      context: ../../storage-service
    environment:
      STORAGE_SERVICE_PORT: ${STORAGE_SERVICE_PORT}
      ACCESS_CONTROL_ALLOW_ORIGIN: ${ACCESS_CONTROL_ALLOW_ORIGIN}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_HOST: minio
      MINIO_PORT: ${MINIO_PORT}
      LOG_LEVEL: ${STORAGE_LOG_LEVEL}
    depends_on:
      - master-api
    command: ["npm", "run", "watch"]
    # volume for hot reloading
    volumes:
      - "../../storage-service/src:/home/node/src:delegated"
    networks:
      mynetwork:
        ipv4_address: 172.20.0.8
    ports:
      - "${STORAGE_SERVICE_PORT}:${STORAGE_SERVICE_PORT}"

  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile.dev
      args:
        API_HOST: master-api
        API_PORT: ${API_PORT}
    environment:
      NODE_ENV: ${NODE_ENV}
      CHOKIDAR_USEPOLLING: "true" # for hot reloading of source files
      REACT_APP_VERSION: ${REACT_APP_VERSION}
      REACT_APP_EXPORT_SERVICE_ENABLED: ${REACT_APP_EXPORT_SERVICE_ENABLED}
      REACT_APP_EMAIL_SERVICE_ENABLED: ${REACT_APP_EMAIL_SERVICE_ENABLED}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EXPORT_PORT: ${EXPORT_PORT}
      EXPORT_HOST: ${EXPORT_HOST}
      INLINE_RUNTIME_CHUNK: ${INLINE_RUNTIME_CHUNK}
      REACT_APP_LOGGING: ${REACT_APP_LOGGING}
      REACT_APP_LOG_LEVEL: ${REACT_APP_LOG_LEVEL}
      REACT_APP_LOGGING_SERVICE_HOST: ${REACT_APP_LOGGING_SERVICE_HOST}
      REACT_APP_LOGGING_SERVICE_PORT: ${REACT_APP_LOGGING_SERVICE_PORT}
      REACT_APP_LOGGING_SERVICE_HOST_SSL: ${REACT_APP_LOGGING_SERVICE_HOST_SSL}
    # volume for hot reloading
    volumes:
      - "../../frontend/src:/app/src"
      - "/app/node_modules"
    networks:
      mynetwork:
        ipv4_address: 172.20.0.9
    ports:
      - "3000:3000"
    stdin_open: true
    restart: always

  slave-node:
    # image: trubudget/blockchain:latest
    build:
      context: ../../blockchain
    environment:
      RPC_PORT: ${SLAVE_RPC_PORT}
      RPC_PASSWORD: ${RPC_PASSWORD}
      ORGANIZATION: ${SLAVE_ORGANIZATION}
      # P2P_HOST must be a valid IP-Address. If you pass a domain like "master-node", the windows kernel will shutdown the process because of a segmentation fault
      P2P_HOST: 172.20.0.11 # IP of master-node
      P2P_PORT: 7447
      API_PROTO: http
      API_HOST: master-api # API to send register request
      API_PORT: ${API_PORT}
    depends_on:
      - master-node
      - master-api
    networks:
      mynetwork:
        ipv4_address: 172.20.0.12
    ports:
      - ${SLAVE_RPC_PORT}:${SLAVE_RPC_PORT}
      - "7448:7447" # slave-node port is 7448 on host
    privileged: true

  slave-api:
    build: ../../api
    environment:
      PORT: ${SLAVE_API_PORT}
      ORGANIZATION: ${SLAVE_ORGANIZATION}
      ORGANIZATION_VAULT_SECRET: ${SLAVE_ORGANIZATION_VAULT_SECRET}
      RPC_HOST: slave-node
      RPC_PORT: ${SLAVE_RPC_PORT}
      ROOT_SECRET: ${ROOT_SECRET}
      RPC_PASSWORD: ${RPC_PASSWORD}
      DOCUMENT_FEATURE_ENABLED: ${DOCUMENT_FEATURE_ENABLED}
      STORAGE_SERVICE_EXTERNAL_URL: ${STORAGE_SERVICE_EXTERNAL_URL}
      STORAGE_SERVICE_HOST: storage-service
      STORAGE_SERVICE_PORT: ${STORAGE_SERVICE_PORT}
      ORGANIZATION_PUBLIC_KEY: ${ORGANIZATION_PUBLIC_KEY}
      ORGANIZATION_PRIVATE_KEY: ${ORGANIZATION_PRIVATE_KEY}
      ENCRYPTION_PASSWORD: ${ENCRYPTION_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SIGNING_METHOD: ${SIGNING_METHOD}
      NODE_ENV: ${NODE_ENV}
      ACCESS_CONTROL_ALLOW_ORIGIN: ${ACCESS_CONTROL_ALLOW_ORIGIN}
    command: ["npm", "run", "watch"] # npm run watch: hot reloading
    networks:
      mynetwork:
        ipv4_address: 172.20.0.44
    ports:
      - ${SLAVE_API_PORT}:${SLAVE_API_PORT}
    depends_on:
      - slave-node

  slave-frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile.dev
      args:
        API_HOST: slave-api
        API_PORT: ${SLAVE_API_PORT}
    environment:
      NODE_ENV: ${NODE_ENV}
      REACT_APP_VERSION: ${REACT_APP_VERSION}
      REACT_APP_EXPORT_SERVICE_ENABLED: "false"
      REACT_APP_EMAIL_SERVICE_ENABLED: "false"
      INLINE_RUNTIME_CHUNK: ${INLINE_RUNTIME_CHUNK}
    # # volume for hot reloading
    # volumes:
    #   - "../../frontend/src:/app/src"
    #   - "/app/node_modules"
    networks:
      mynetwork:
        ipv4_address: 172.20.0.92
    ports:
      - "3005:3000"
    stdin_open: true
    restart: always
